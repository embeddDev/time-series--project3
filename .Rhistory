b[2] = x[2]-x[1]
b[1] = b[2]
for(i in 3:length(x)){
s[i] = alpha*x[i] + (-alpha)*(s[i-1]+b[i-1]
b[i] = beta*(s[i]-s[i-1]) + (1-beta)*b[i-1]
}
D_expSM <- function(x,alpha,beta){
s = NULL
b = NULL
s[2] = x[2]
b[2] = x[2]-x[1]
b[1] = b[2]
for(i in 3:length(x)){
s[i] = alpha*x[i] + (-alpha)*(s[i-1]+b[i-1])
b[i] = beta*(s[i]-s[i-1]) + (1-beta)*b[i-1]
}
return(b)
}
beta = 0.5
h = 2expSM(x,alpha,beta)
h = D_expSM(x,alpha,beta)
plot(h)
plot(h,type = 'l')
x <- arima.sim(model = list(ar = c(0.5)), n=250)
k = 30
MA <- function(x,k){  #simple moving average
MA = NULL
for (i in k:length(x)){
MA[i] = sum(x[i-k+1:i])/k
}
MA[1] = x[1]
for(j in 2:k-1){
MA[j] = sum(x[1:j])/j
}
return (MA)
}
u = MA(x,k)
plot(u,type = 'l')
expMA <- function(x,alpha){ #exponential moving average
st = NULL
expMA = NULL
st[1] = x[1]
for(i in 2:length(x)){
st[i] = alpha*x[i-1] + (1-alpha)*st[i-1]
}
return (st)
}
alpha = 0.5
t = expMA(x,alpha)
plot(t,type = 'l')
D_expSM <- function(x,alpha,beta){  #exponential moving average
s = NULL
b = NULL
s[2] = x[2]
b[2] = x[2]-x[1]
b[1] = b[2]
for(i in 3:length(x)){
s[i] = alpha*x[i] + (-alpha)*(s[i-1]+b[i-1])
b[i] = beta*(s[i]-s[i-1]) + (1-beta)*b[i-1]
}
return(b)
}
beta = 0.5
h = D_expSM(x,alpha,beta)
plot(h,type = 'l')
x <- arima.sim(model = list(ar = c(0.5)), n=250)
k = 30
MA <- function(x,k){  #simple moving average
MA = NULL
for (i in k:length(x)){
MA[i] = sum(x[i-k+1:i])/k
}
MA[1] = x[1]
for(j in 2:k-1){
MA[j] = sum(x[1:j])/j
}
return (MA)
}
u = MA(x,k)
plot(u,type = 'l')
expMA <- function(x,alpha){ #exponential moving average
st = NULL
expMA = NULL
st[1] = x[1]
for(i in 2:length(x)){
st[i] = alpha*x[i-1] + (1-alpha)*st[i-1]
}
return (st)
}
alpha = 0.5
t = expMA(x,alpha)
plot(t,type = 'l')
D_expSM <- function(x,alpha,beta){  #exponential moving average
s = NULL
b = NULL
s[2] = x[2]
b[2] = x[2]-x[1]
b[1] = b[2]
for(i in 3:length(x)){
s[i] = alpha*x[i] + (-alpha)*(s[i-1]+b[i-1])
b[i] = beta*(s[i]-s[i-1]) + (1-beta)*b[i-1]
}
return(b)
}
D_expSM <- function(x,alpha,beta){  #exponential moving average
s = NULL
b = NULL
s[2] = x[2]
b[2] = x[2]-x[1]
b[1] = b[2]
for(i in 3:length(x)){
s[i] = alpha*x[i] + (-alpha)*(s[i-1]+b[i-1])
b[i] = beta*(s[i]-s[i-1]) + (1-beta)*b[i-1]
}
F_t10 = s[end] + 10*b[end] #predict k steps ahead - F_t+m = s_t + mb_t
return(b)
D_expSM <- function(x,alpha,beta){  #exponential moving average
s = NULL
b = NULL
s[2] = x[2]
b[2] = x[2]-x[1]
b[1] = b[2]
for(i in 3:length(x)){
s[i] = alpha*x[i] + (-alpha)*(s[i-1]+b[i-1])
b[i] = beta*(s[i]-s[i-1]) + (1-beta)*b[i-1]
}
F_t10 = s[end] + 10*b[end] #predict k steps ahead - F_t+m = s_t + mb_t
return(b,F_f10)
}
beta = 0.5
[h,F] = D_expSM(x,alpha,beta)
?return
D_expSM <- function(x,alpha,beta){  #exponential moving average
s = NULL
b = NULL
s[2] = x[2]
b[2] = x[2]-x[1]
b[1] = b[2]
for(i in 3:length(x)){
s[i] = alpha*x[i] + (-alpha)*(s[i-1]+b[i-1])
b[i] = beta*(s[i]-s[i-1]) + (1-beta)*b[i-1]
}
for(j in 1:10){
b[length(x)+j] = s[length(x)]+j*b[length(x)]  #F_t+m = s_t + m*b_t
}
return(b)
}
beta = 0.5
[h,F] = D_expSM(x,alpha,beta)
h = D_expSM(x,alpha,beta)
plot(h,type = 'l')
beta = 0.8
alpha = 0.8
h = D_expSM(x,alpha,beta)
plot(h,type = 'l')
alpha = 0.8
beta = 0.1
h = D_expSM(x,alpha,beta)
plot(h,type = 'l')
Predict_K <-  function(x,k){
D_expSM <- function(x,alpha,beta){  #exponential moving average
s = NULL
b = NULL
s[2] = x[2]
b[2] = x[2]-x[1]
b[1] = b[2]
for(i in 3:length(x)){
s[i] = alpha*x[i] + (1-alpha)*(s[i-1]+b[i-1])
b[i] = beta*(s[i]-s[i-1]) + (1-beta)*b[i-1]
}
for(j in 1:10){
b[length(x)+j] = s[length(x)]+j*b[length(x)]  #F_t+m = s_t + m*b_t
}
return(b)
}
beta = 0.1
h = D_expSM(x,alpha,beta)
plot(h,type = 'l')
Predict_K <-  function(x,k){
}
D_expSM <- function(x,alpha,beta){  #exponential moving average
s = NULL
b = NULL
s[2] = x[2]
b[2] = x[2]-x[1]
b[1] = b[2]
for(i in 3:length(x)){
s[i] = alpha*x[i] + (1-alpha)*(s[i-1]+b[i-1])
b[i] = beta*(s[i]-s[i-1]) + (1-beta)*b[i-1]
}
for(j in 1:10){
b[length(x)+j] = s[length(x)]+j*b[length(x)]  #F_t+m = s_t + m*b_t
}
return(b)
}
beta = 0.1
h = D_expSM(x,alpha,beta)
plot(h,type = 'l')
alpha = 0.1
alpha = 0.1
beta = 0.8
h = D_expSM(x,alpha,beta)
plot(h,type = 'l')
}
plot.new()
plot(h,type = 'l')
beta = 0.1
h = D_expSM(x,alpha,beta)
plot(h,type = 'l')
beta = 0.8
h = D_expSM(x,alpha,beta)
plot(x)
?xts
y
yess
?xts
??xts
?Sys.date
?Sys.date()
??Sys.date
sys.date()
Sys.Date()
678/365*252
?ts
u
x <- arima.sim(model = list(ar = c(0.5)), n=250)
k = 30
MA <- function(x,k){  #simple moving average
MA = NULL
for (i in k:length(x)){
MA[i] = sum(x[i-k+1:i])/k
}
MA[1] = x[1]
ent 4
dev.off()
require("forecast")
URL <- "https://datamarket.com/api/v1/list.csv?ds=yfz!6zu=4&dates_as_dates=1&sharing_key=3cff9bd7e76443b5b416ce1e757fb557"
gamma <- read.csv(URL)
gamma$Date <- as.Date(gamma$Date, "%Y-%m-%d")
#Question 1 Plot the time series.
plot(gamma$Value ~gamma$Date,type='l', main="Gamma stock price index")
grid(nx=12, ny=5)
gamma.ts <- ts(gamma$Value,frequency=12,start = c(2008,80),end= c(2014,252))
#Question 2 Split the time series into a training set and a test set.
training_set <- subset(gamma,gamma$Date <= "2013-12-30")
#
test_set <- subset(gamma,gamma$Date > 2013-12-30)
#Question 3 Choose a model and make a prediction 20 steps ahead.
training_set.ts <- ts(training_set$Value,frequency=12,start = c(2008,80),end= c(2014,252))
#training_set.stl <- stl(training_set.ts,s.window = "periodic")
gamma
rExample <- read.table("C:/R_Data/rExample.RData", quote="\"")
View(rExample)
Data = read.csv("hpi.csv", header=TRUE, sep= ";",dec=",")
Data = read.csv("hpi.csv", header=TRUE, sep= ";",dec=",")
# -------Housing Economics (40%)--------
Data = read.csv("hpi.csv", header=TRUE, sep= ";",dec=",")
setwd('C:\R_Data\time-series--project3')
setwd("C:\R_Data\time-series--project3")
setwd?
Data = read.csv("hpi.csv", header=TRUE, sep= ";",dec=",")
setwd("C:/R_Data/time-series--project3")
Data = read.csv("hpi.csv", header=TRUE, sep= ";",dec=",")
#TASK 1
# Construct a structural equation for house prices. Theorize on the expected sign of the parameter
# estimates on each of the variables.
#ANS:
#Does it make sense to use all of the data? Theorize,
#ANS: NO, some of the variable contain very similar information, and should not improve the model very much due to cross correlation.
#which data to use and explain your data selection.
#
#ANS:
# TASK 2
#Plot the relationship between house prices and leasing over time. Theorize on the relationship
# between the two variables. Is there an endogenous relationship between the two?
plot(Data$HousePriceIndex/max(Data$HousePriceIndex) ~Data$YearMonth,
type="l",
main="Comparison",
xlab="Time",
ylab="House Price Index/Lease Index",
col="black")
lines(Data$LeaseIndex/max(Data$LeaseIndex) ~Data$YearMonth,
type="l",
main="Lease index",
col="dark red")
legend("topleft",
c("House Price index","Lease index"),
lty = 1,
col=c('black', 'darkred'),
cex=0.6)
#THEORY : No obvious relation ship  between the variables.
# We see no endogenous relationship.
# Do some preliminary analysis, plotting all variables with the house price index.
# Plot House Price index vs. Construction Cost, Real estate Transactions, Loans of Banks to Households
layout(1:1)
plot(Data$HousePriceIndex/max(Data$HousePriceIndex) ~Data$YearMonth,
xlab="Time",
ylab="Scaled indices/rates",
type="l",
main="Comparison",
col="black",
ylim=c(0.1, 1))
lines(Data$ConstructionCostIndex/max(Data$ConstructionCostIndex) ~Data$YearMonth,
type="l",
col="dark red")
lines(Data$RealEstateTransactions/max(Data$RealEstateTransactions) ~Data$YearMonth,
type="l",
col="green")
lines(Data$LoansOfBanksToHouseholds/max(Data$LoansOfBanksToHouseholds) ~Data$YearMonth,
type = 'l',
col="purple"
)
legend(0.1,0.4,
c("House Price index","Construction Cost index","Real Estate Transactions", "Loans of Banks to Housholds"),
lty = 1,
col=c('black', 'darkred','green','purple'),
cex=0.6)
# Plot House Price index vs. UnindexedLoans, CentralBankRates, Inflation
layout(1:1)
plot(Data$HousePriceIndex/max(Data$HousePriceIndex) ~Data$YearMonth,
xlab="Time",
ylab="Scaled indexes/rates",
type="l",
main="Comparison",
col="black",
ylim=c(0, 1))
lines(Data$Un.indexedLoans/max(Data$Un.indexedLoans) ~Data$YearMonth,
type="l",
col="dark red")
lines(Data$CentralBankRates/max(Data$CentralBankRates) ~Data$YearMonth,
type="l",
col="green")
lines(Data$Inflation/max(Data$Inflation) ~Data$YearMonth,
type = 'l',
col="purple"
)
legend("topleft",
c("House Price index","Unindexed Loans","Central Bank Rates", "Inflation"),
lty = 1,
col=c('black', 'darkred','green','purple'),
cex=0.6)
# Plot House Price index vs. PurchasingPower, PurchasingPowerOfWages, IndexLoans
panel.cor.scale <- function(x, y, digits=2, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r = (cor(x, y,use="pairwise"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * abs(r))
}
panel.cor <- function(x, y, digits=2, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r = (cor(x, y,use="pairwise"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex )
}
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="cyan", ...)
}
pairs.panels <- function (x,y,smooth=TRUE,scale=FALSE)
{if (smooth ){
if (scale) {
pairs(x,diag.panel=panel.hist,upper.panel=panel.cor.scale,lower.panel=panel.smooth)
}
else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor,lower.panel=panel.smooth)
} #else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor,lower.panel=panel.smooth)
}
else #smooth is not true
{ if (scale) {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor.scale)
} else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor) }
} #end of else (smooth)
} #end of function
names(data)
panil.cor.scale(Data$HousePriceIndex,Data$LeaseIndex)
panel.cor.scale(Data$HousePriceIndex,Data$LeaseIndex)
dev.off()
panel.cor.scale(Data$HousePriceIndex,Data$LeaseIndex)
panel.cor.scale(Data$HousePriceIndex,Data$LeaseIndex)
panel.cor.scale <- function(x, y, digits=2, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r = (cor(x, y,use="pairwise"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * abs(r))
}
panel.cor <- function(x, y, digits=2, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r = (cor(x, y,use="pairwise"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex )
}
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="cyan", ...)
}
pairs.panels <- function (x,y,smooth=TRUE,scale=FALSE)
{if (smooth ){
if (scale) {
pairs(x,diag.panel=panel.hist,upper.panel=panel.cor.scale,lower.panel=panel.smooth)
}
else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor,lower.panel=panel.smooth)
} #else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor,lower.panel=panel.smooth)
}
else #smooth is not true
{ if (scale) {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor.scale)
} else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor) }
} #end of else (smooth)
} #end of function
panel.cor.scale <- function(x, y, digits=2, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r = (cor(x, y,use="pairwise"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex * abs(r))
}
panel.cor <- function(x, y, digits=2, prefix="", cex.cor)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r = (cor(x, y,use="pairwise"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex )
}
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col="cyan", ...)
}
pairs.panels <- function (x,y,smooth=TRUE,scale=FALSE)
{if (smooth ){
if (scale) {
pairs(x,diag.panel=panel.hist,upper.panel=panel.cor.scale,lower.panel=panel.smooth)
}
else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor,lower.panel=panel.smooth)
} #else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor,lower.panel=panel.smooth)
}
else #smooth is not true
{ if (scale) {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor.scale)
} else {pairs(x,diag.panel=panel.hist,upper.panel=panel.cor) }
} #end of else (smooth)
} #end of function
Data = read.csv("hpi.csv", header=TRUE, sep= ";",dec=",")
panel.cor.scale(Data$HousePriceIndex,Data$LeaseIndex)
pairs?
?pairs
?pairs
panel.cor.scale(Data$HousePriceIndex,Data$LeaseIndex, upper.panel = panel.cor,lower)
pairs(Data$HousePriceIndex,Data$LeaseIndex, upper.panel = panel.cor,lower.panel = pairs.panels, diag.panel = panel.hist)
pairs(Data, upper.panel = panel.cor,lower.panel = pairs.panels, diag.panel = panel.hist)
pairs(Data, upper.panel = panel.cor,lower.panel = pairs.panels, diag.panel = panel.hist)
?pairs
pairs(Data[,1:5], upper.panel = panel.cor,lower.panel = pairs.panels, diag.panel = panel.hist)
View(Data)
View(Data)
pairs(Data[,4:9], upper.panel = panel.cor,lower.panel = pairs.panels, diag.panel = panel.hist)
pairs(Data[,4:9], upper.panel = panel.cor,lower.panel = pairs.panels, diag.panel = panel.hist)
pairs(Data[,c(4:9)], upper.panel = panel.cor,lower.panel = pairs.panels, diag.panel = panel.hist)
?pairs
pairs(Data[4:9], upper.panel = panel.cor,lower.panel = pairs.panels, diag.panel = panel.hist)
pairs(Data[4:9], upper.panel = panel.cor, diag.panel = panel.hist)
?loess
pairs(Data[4:9], upper.panel = panel.cor,lower.panel = pairs.loess, diag.panel = panel.hist)
pairs(Data[4:9], upper.panel = panel.cor,lower.panel = pairs.smooth, diag.panel = panel.hist)
pairs(Data[4:9], upper.panel = panel.cor,lower.panel = panel.smooth, diag.panel = panel.hist)
pairs(Data[4:17], upper.panel = panel.cor,lower.panel = pairs.smooth, diag.panel = panel.hist)
pairs(Data[4:17], upper.panel = panel.cor,lower.panel = panel.smooth, diag.panel = panel.hist)
pairs(Data[4:10], upper.panel = panel.cor,lower.panel = panel.smooth, diag.panel = panel.hist)
pairs(Data[4:11], upper.panel = panel.cor,lower.panel = panel.smooth, diag.panel = panel.hist)
pairs(Data[c(4,12:17)], upper.panel = panel.cor,lower.panel = panel.smooth, diag.panel = panel.hist)
pairs(Data[4:11], upper.panel = panel.cor,lower.panel = panel.smooth, diag.panel = panel.hist)
pairs(Data[c(4,12:17)], upper.panel = panel.cor,lower.panel = panel.smooth, diag.panel = panel.hist)
plot((HousePriceIndex-mean(HousePriceIndex))/sd(HousePriceIndex) ~YearMonth,
xlab="Time",
ylab="Scaled indices/rates",
type="l",
main="Comparison",
col="black",
ylim=c(-2, 2.3),
lwd=4)
