}
MA[1] = x[1]
for(j in 2:k-1){
MA[j] = sum(x[1:j])/j
}
return (MA)
}
x <- arima.sim(model = list(ar = c(0.5)), n=250)
k = 10
u = MA(x,k)
plot(u,type = 'l')
u
x
length(x)
i
MA <- function(x,k){
MA = NULL
for (i in k:length(x)){
MA[i] = sum(x[i-k+1:i])/k
print i
}
MA[1] = x[1]
for(j in 2:k-1){
MA[j] = sum(x[1:j])/j
}
return (MA)
}
x <- arima.sim(model = list(ar = c(0.5)), n=250)
MA <- function(x,k){
MA = NULL
for (i in k:length(x)){
MA[i] = sum(x[i-k+1:i])/k
print(i)
}
MA[1] = x[1]
for(j in 2:k-1){
MA[j] = sum(x[1:j])/j
}
return (MA)
}
x <- arima.sim(model = list(ar = c(0.5)), n=250)
k = 10
u = MA(x,k)
u
x
MA <- function(x,k){
MA = NULL
for (i in k:length(x)){
MA[i] = sum(x[i-k+1:i])/k
}
MA[1] = x[1]
for(j in 2:k-1){
MA[j] = sum(x[1:j])/j
}
return (MA)
}
x <- arima.sim(model = list(ar = c(0.5)), n=250)
k = 10
u = MA(x,k)
plot(u,type = 'l')
u
u[131]
x[131]
MA <- function(x,k){
MA = NULL
for (i in k:length(x)){
MA[i] = sum(x[i-k+1:i])/k
}
MA[1] = x[1]
for(j in 2:k-1){
MA[j] = sum(x[1:j])/j
}
return (MA)
}
x = seq(from = 4.5, to = 10000, by = 2)
#x <- arima.sim(model = list(ar = c(0.5)), n=250)
k = 10
u = MA(x,k)
plot(u,type = 'l')
x = seq(from = 4.5, to = 100, by = 2)
#x <- arima.sim(model = list(ar = c(0.5)), n=250)
k = 10
u = MA(x,k)
plot(u,type = 'l')
expMA <- function(x,alpha){
st = NULL
st[1] = x[1]
for(i in 2:length(x)){
st[i] = alpha*x[i-1] + (1-alpha)*st[i-1]
}
return (st)
}
alpha = 0.5
t = expMA(x,alpha)
plot(t)
alpha = 0.5
x <- arima.sim(model = list(ar = c(0.5)), n=250)
t = expMA(x,alpha)
plot(t)
plot(t,type='l')
D_expSM <- function(x,alpha,beta)
{
s = NULL
b = NULL
s[2] = x[2]
b[2] = x[2]-x[1]
b[1] = b[2]
for(i in 3:length(x)){
s[i] = alpha*x[i] + (-alpha)*(s[i-1]+b[i-1]
b[i] = beta*(s[i]-s[i-1]) + (1-beta)*b[i-1]
}
return(b)
}
beta = 0.5
D_expSM <- function(x,alpha,beta)
{
s = NULL
b = NULL
s[2] = x[2]
b[2] = x[2]-x[1]
a
1
2
2
2
2
2
2
3
3
D_expSM <- function(x,alpha,beta)
{
s = NULL
b = NULL
s[2] = x[2]
b[2] = x[2]-x[1]
b[1] = b[2]
for(i in 3:length(x)){
s[i] = alpha*x[i] + (-alpha)*(s[i-1] + b[i-1])
b[i] = beta*(s[i]-s[i-1]) + (1-beta)*b[i-1]
}
return(b)
}
beta = 0.5
h = D_expSM(x,alpha,beta)
plot(h)
2
2
2
2
2
2
2
D_expSM <- function(x,alpha,beta){
s = NULL
b = NULL
s[2] = x[2]
b[2] = x[2]-x[1]
b[1] = b[2]
for(i in 3:length(x)){
s[i] = alpha*x[i] + (-alpha)*(s[i-1] + b[i-1])
b[i] = beta*(s[i]-s[i-1]) + (1-beta)*b[i-1]
}
return(b)
}
beta = 0.5
h = D_expSM(x,alpha,beta)
plot(h)
D_expSM <- function(x,alpha,beta){
s = NULL
b = NULL
s[2] = x[2]
b[2] = x[2]-x[1]
b[1] = b[2]
for(i in 3:length(x)){
s[i] = alpha*x[i] + (-alpha)*(s[i-1] + b[i-1])
b[i] = beta*(s[i]-s[i-1]) + (1-beta)*b[i-1]
}
return(b)
}
beta = 0.5
h = D_expSM(x,alpha,beta)
plot(h)
?rev
?weekdays
?ts
URL <- "http://datamarket.com/api/v1/list.csv?ds=yfz!6zu=4&dates_as_dates=1&sharing_key=2ade1f6d015e4d099dedf1fe75f50a79"
gamma <- read.csv(URL, header = TRUE,sep = ",",)
gamma$Date <- as.Date(gamma$Date, "%Y-%m-%d")
plot(gamma$Value ~ gamma$Date,type = 'l')
gamma.ts <- ts(data=gamma$Value)
?subset
gamma.ts <- ts(data=gamma$Value)
training_set <- subset(gamma.ts,gamma.ts$Date <= "2013-06-03")
training_set <- subset(gamma.ts, $Date <= "2013-06-03")
training_set <- subset(gamma.ts, Date <= "2013-06-03")
training_set.ts <- ts(training_set$Value,frequency = 12,
start = c(2008-12-30, 252),end=c(2004,td))
training_set <- subset(gamma, Date <= "2013-06-03")
training_set.ts <- ts(training_set$Value,frequency = 12,
start = c(2008-12-30, 252),end=c(2004,td))
today <- Sys.time()
doy <- strftime(today, format = "%j")
td <- as.numeric(doy)/365*252
r <- round(td)
training_set.ts <- ts(training_set$Value,frequency = 12,
start = c(2008-12-30, 252),end=c(2004,td))
?dev
?dev.off
require("forecast")
URL <- "http://datamarket.com/api/v1/list.csv?ds=yfz!6zu=4&dates_as_dates=1&sharing_key=3cff9bd7e76443b5b416ce1e757fb557"
gamma <- read.csv(URL)
gamma$Date <- as.Date(gamma$Date, "%Y-%m-%d")
# Question 1
#       Plot the time series.
#
plot(gamma$Value ~gamma$Date,type="l", main="Gamma stock price index")
grid(nx=12, ny=5)
training_set <- subset(gamma, (gamma$Date > '2011-01-01') & (gamma$Date <= '2013-12-31'))
test_set <- subset(gamma,gamma$Date > '2013-12-31')
D_expSM <- function(data,alpha,beta){   #Double exponential smoothing
s = NULL
b = NULL
f = NULL
s[2] = data[2]
b[2] = data[2]-data[1]
b[1] = b[2]
for(i in 3:length(data)){
s[i] = alpha*data[i] + (1-alpha)*(s[i-1] + b[i-1])
b[i] = beta*(s[i]-s[i-1]) + (1-beta)*b[i-1]
}
for(j in 1:20){                                 # Ans Q4
s[length(data)+j] = s[length(data)]+j*b[length(data)]  # F_t+m = s_t + m*b_t
}                                               # reikna 20 skref fram Ãƒ­ timann
return(s)
}
x = rev(training_set$Value)
test_x = rev(test_set$Value)
x20 = c(x,test_x[1:20])
date = rev(training_set$Date)
date20 = date
p = length(date)
o = length(date20)
for (i in 1:20){
date20[o+i] = date[o]+i
}
h = D_expSM(x,0.1,0.1)
plot(h ~ date20, type="l",ylab="x",main=c("alpha=0.1", "beta=0.1"), col = "blue")
legend("topleft", legend =c("lina","Actual data","Predicted"),col = c("black","red","blue"), lty = 1)
lines(x20 ~ date20, col="red")
abline(v = date[p], type="l")
?abline
plot(h ~ date20, type="l",ylab="x",main=c("alpha=0.1", "beta=0.1"), col = "blue")
legend("topleft", legend =c("lina","Actual data","Predicted"),col = c("black","red","blue"), lty = 1)
lines(x20 ~ date20, col="red")
abline(v = date[p],b=FALSE, type="l")
plot(h ~ date20, type="l",ylab="x",main=c("alpha=0.1", "beta=0.1"), col = "blue")
legend("topleft", legend =c("lina","Actual data","Predicted"),col = c("black","red","blue"), lty = 1)
lines(x20 ~ date20, col="red")
abline(v = date[p])
URL <- "http://datamarket.com/api/v1/list.csv?ds=yfz!6zu=4&dates_as_dates=1&sharing_key=3cff9bd7e76443b5b416ce1e757fb557"
gamma <- read.csv(URL)
gamma$Date <- as.Date(gamma$Date, "%Y-%m-%d")
# Question 1
#       Plot the time series.
#
plot(gamma$Value ~gamma$Date,type="l", main="Gamma stock price index")
grid(nx=12, ny=5)
# Question 2
#       Split the time series into a training set and a test set.
#
training_set <- subset(gamma, (gamma$Date > '2011-01-01') & (gamma$Date <= '2013-12-31'))
test_set <- subset(gamma,gamma$Date > '2013-12-31')
#x<-  training_set$Value
# Question 3
#       Choose a model and make a prediction 20 steps ahead.
#
D_expSM <- function(data,alpha,beta){   #Double exponential smoothing
s = NULL
b = NULL
f = NULL
s[2] = data[2]
b[2] = data[2]-data[1]
b[1] = b[2]
for(i in 3:length(data)){
s[i] = alpha*data[i] + (1-alpha)*(s[i-1] + b[i-1])
b[i] = beta*(s[i]-s[i-1]) + (1-beta)*b[i-1]
}
for(j in 1:20){                                 # Ans Q4
s[length(data)+j] = s[length(data)]+j*b[length(data)]  # F_t+m = s_t + m*b_t
}                                               # reikna 20 skref fram Ãƒ­ timann
return(s)
}
x = rev(training_set$Value)
test_x = rev(test_set$Value)
x20 = c(x,test_x[1:20])
date = rev(training_set$Date)
date20 = date
p = length(date)
o = length(date20)
for (i in 1:20){
date20[o+i] = date[o]+i
}
h = D_expSM(x,0.1,0.1)
plot(h ~ date20, type="l",ylab="x",main=c("alpha=0.1", "beta=0.1"), col = "blue")
legend("topleft", legend =c("lina","Actual data","Predicted"),col = c("black","red","blue"), lty = 1)
lines(x20 ~ date20, col="red")
abline(v = date[p])
?abline
plot(h ~ date20, type="l",ylab="x",main=c("alpha=0.1", "beta=0.1"), col = "blue")
legend("topleft", legend =c("lina","Actual data","Predicted"),col = c("black","red","blue"), lty = 1)
lines(x20 ~ date20, col="red")
abline(v = date[p], \dots)
abline(v = date[p])
plot(h ~ date20, type="l",ylab="x",main=c("alpha=0.1", "beta=0.1"), col = "blue")
legend("topleft", legend =c("lina","Actual data","Predicted"),col = c("black","red","blue"), lty = 1)
lines(x20 ~ date20, col="red")
abline(v = date[p],untf = FALSE, \dots)
plot(h ~ date20, type="l",ylab="x",main=c("alpha=0.1", "beta=0.1"), col = "blue")
legend("topleft", legend =c("lina","Actual data","Predicted"),col = c("black","red","blue"), lty = 1)
lines(x20 ~ date20, col="red")
abline(v = date[p], lty="dashed")
plot(h ~ date20, type="l",ylab="x",main=c("alpha=0.1", "beta=0.1"), col = "blue")
legend("topleft", legend =c("lina","Actual data","Predicted","alpha=0.1"),col = c("black","red","blue"), lty = 1)
lines(x20 ~ date20, col="red")
abline(v = date[p], lty="dashed")
legend("topleft", legend =c("End of training data","Actual data","Predicted"),col = c("black","red","blue"), lty = 1)
lines(x20 ~ date20, col="red")
abline(v = date[p], lty="dashed")
plot(h ~ date20, type="l",ylab="x",main=c("Actual data vs. predicted","alpha=0.1, beta=0.1"), col = "blue")
legend("topleft", legend =c("End of training data","Actual data","Predicted"),col = c("black","red","blue"), lty = 1)
lines(x20 ~ date20, col="red")
abline(v = date[p], lty="dashed")
?plot
plot(h ~ date20, type="l",ylab="x",main=c("Actual data vs. predicted","alpha=0.1, beta=0.1"), col = "blue",lwd = 10)
lines(x20 ~ date20, col="red")
abline(v = date[p], lty="dashed")
legend("topleft", legend =c("End of training data","Actual data","Predicted"),col = c("black","red","blue"), lty = 1)
plot(h ~ date20, type="l",ylab="x",main=c("Actual data vs. predicted","alpha=0.1, beta=0.1"), col = "blue",lwd = 2)
lines(x20 ~ date20, col="red")
abline(v = date[p], lty="dashed")
legend("topleft", legend =c("End of training data","Actual data","Predicted"),col = c("black","red","blue"), lty = 1)
URL <- "http://datamarket.com/api/v1/list.csv?ds=yfz!6zu=4&dates_as_dates=1&sharing_key=3cff9bd7e76443b5b416ce1e757fb557"
gamma <- read.csv(URL)
gamma$Date <- as.Date(gamma$Date, "%Y-%m-%d")
# Question 1
#       Plot the time series.
#
plot(gamma$Value ~gamma$Date,type="l", main="Gamma stock price index")
grid(nx=12, ny=5)
# Question 2
#       Split the time series into a training set and a test set.
#
training_set <- subset(gamma, (gamma$Date > '2011-01-01') & (gamma$Date <= '2013-12-31'))
test_set <- subset(gamma,gamma$Date > '2013-12-31')
# Question 3
#       Choose a model and make a prediction 20 steps ahead.
#
D_expSM <- function(data,alpha,beta){   #Double exponential smoothing
s = NULL
b = NULL
f = NULL
s[2] = data[2]
b[2] = data[2]-data[1]
b[1] = b[2]
for(i in 3:length(data)){
s[i] = alpha*data[i] + (1-alpha)*(s[i-1] + b[i-1])
b[i] = beta*(s[i]-s[i-1]) + (1-beta)*b[i-1]
f[i+1] = s[i]+b[i]
}
for(j in 1:20){                                 # Ans Q4
f[length(data)+j+1] = s[length(data)+1]+b[length(data)+1]  # F_t+m = s_t + m*b_t
}                                               # reikna 20 skref fram Ãƒ­ timann
return(f)
}
x = rev(training_set$Value)
test_x = rev(test_set$Value)
x20 = c(x,test_x[1:20])
date = rev(training_set$Date)
date20 = date
p = length(date)
o = length(date20)
for (i in 1:20){
date20[o+i] = date[o]+i
}
h = D_expSM(x,0.1,0.1)
plot(h ~ date20, type="l",ylab="x",main=c("Actual data vs. predicted","alpha=0.1, beta=0.1"), col = "blue",lwd = 2)
lines(x20 ~ date20, col="red")
abline(v = date[p], lty="dashed")
legend("topleft", legend =c("End of training data","Actual data","Predicted"),col = c("black","red","blue"), lty = 1)
# Comments: Our initial thougth was to use Holt Winters (Triple exp smoothing) but since there is no obvious seasonal
# factor in our data (but definetally a trend) we decided to use Double exp smoothing to make the forecast.
#
plot(gamma$Value ~gamma$Date,type="l", main="Gamma stock price index")
grid(nx=12, ny=5)
plot(h ~ date20, type="l",ylab="x",main=c("Actual data vs. predicted","alpha=0.1, beta=0.1"), col = "blue",lwd = 2)
x = rev(training_set$Value)
test_x = rev(test_set$Value)
x20 = c(x,test_x[1:20])
date = rev(training_set$Date)
date20 = date
p = length(date)
o = length(date20)
for (i in 1:20){
date20[o+i] = date[o]+i
}
h = D_expSM(x,0.1,0.1)
plot(h ~ date20, type="l",ylab="x",main=c("Actual data vs. predicted","alpha=0.1, beta=0.1"), col = "blue",lwd = 2)
f
h
x = rev(training_set$Value)
test_x = rev(test_set$Value)
x20 = c(x,test_x[1:20])
date = rev(training_set$Date)
date20 = date
p = length(date)
o = length(date20)
for (i in 1:20){
date20[o+i] = date[o]+i
}
h = D_expSM(x,0.1,0.1)
plot(h ~ date20, type="l",ylab="x",main=c("Actual data vs. predicted","alpha=0.1, beta=0.1"), col = "blue",lwd = 2)
lines(x20 ~ date20, col="red")
abline(v = date[p], lty="dashed")
legend("topleft", legend =c("End of training data","Actual data","Predicted"),col = c("black","red","blue"), lty = 1)
# Comments: Our initial thougth was to use Holt Winters (Triple exp smoothing) but since there is no obvious seasonal
URL <- "http://datamarket.com/api/v1/list.csv?ds=yfz!6zu=4&dates_as_dates=1&sharing_key=3cff9bd7e76443b5b416ce1e757fb557"
gamma <- read.csv(URL)
gamma$Date <- as.Date(gamma$Date, "%Y-%m-%d")
# Question 1
#       Plot the time series.
#
plot(gamma$Value ~gamma$Date,type="l", main="Gamma stock price index")
grid(nx=12, ny=5)
# Question 2
#       Split the time series into a training set and a test set.
#
training_set <- subset(gamma, (gamma$Date > '2011-01-01') & (gamma$Date <= '2013-12-31'))
test_set <- subset(gamma,gamma$Date > '2013-12-31')
# Question 3
#       Choose a model and make a prediction 20 steps ahead.
#
D_expSM <- function(data,alpha,beta){   #Double exponential smoothing
s = NULL
b = NULL
f = NULL
s[2] = data[2]
b[2] = data[2]-data[1]
b[1] = b[2]
for(i in 3:length(data)){
s[i] = alpha*data[i] + (1-alpha)*(s[i-1] + b[i-1])
b[i] = beta*(s[i]-s[i-1]) + (1-beta)*b[i-1]
}
for(j in 1:20){                                 # Ans Q4
s[length(data)+j] = s[length(data)]+j*b[length(data)]  # F_t+m = s_t + m*b_t
}                                               # reikna 20 skref fram Ãƒ­ timann
return(s)
}
x = rev(training_set$Value)
test_x = rev(test_set$Value)
x20 = c(x,test_x[1:20])
date = rev(training_set$Date)
date20 = date
p = length(date)
o = length(date20)
for (i in 1:20){
date20[o+i] = date[o]+i
}
h = D_expSM(x,0.1,0.1)
plot(h ~ date20, type="l",ylab="x",main=c("Actual data vs. predicted","alpha=0.1, beta=0.1"), col = "blue",lwd = 2)
lines(x20 ~ date20, col="red")
abline(v = date[p], lty="dashed")
legend("topleft", legend =c("End of training data","Actual data","Predicted"),col = c("black","red","blue"), lty = 1)
# Comments: Our initial thougth was to use Holt Winters (Triple exp smoothing) but since there is no obvious seasonal
# factor in our data (but definetally a trend) we decided to use Double exp smoothing to make the forecast.
legend("topleft", legend =c("End of training data","Actual data","Smoothed + Predicted"),col = c("black","red","blue"), lty = 1)
detach(Data)
BuildingSupplyStore = read.csv("BuildingSupplyStore.csv", header=TRUE, sep= ";",dec=",")
setwd("~/Documents/GitHub/time-series--project3")
setwd("~/Documents/GitHub/time-series--project3")
BuildingSupplyStore = read.csv("BuildingSupplyStore.csv", header=TRUE, sep= ";",dec=",")
BuildingSupplyStore = within(BuildingSupplyStore,kalendar <- relevel(kalendar,ref="Normal"))
#ikea <- within(ikea, Kalender <- relevel(Kalendar, ref = "Normal"))
BuildingSupplyStore = within(BuildingSupplyStore,Kalendar <- relevel(Kalendar,ref="Normal"))
attach(BuildingSupplyStore)
BuildingSupplyStore$Kalendar(tail)
tail(BuildingSupplyStore$Kalendar)
tail(BuildingSupplyStore$Salgdage)
BuildingSupplyStore$Salgdage
BuildingSupplyStore$InStore
BuildingSupplyStore$Respons.Media
BuildingSupplyStore$Print[1]
Print[1]
?value
Print[1]+InStore[1]
BuildingSupplyStore = read.csv("BuildingSupplyStore.csv", header=TRUE, sep= ";",dec=",")
<<<<<<< Updated upstream
BuildingSupplyStore = within(BuildingSupplyStore,BuildingSupplyStore$Kalendar <- relevel(BuildingSupplyStore$Kalendar,ref="Normal"))
BuildingSupplyStore = within(BuildingSupplyStore,Kalendar <- relevel(Kalendar,ref="Normal"))
>>>>>>> Stashed changes
attach(BuildingSupplyStore)
BuildingSupplyStore = read.csv("BuildingSupplyStore.csv", header=TRUE, sep= ";",dec=",")
BuildingSupplyStore = within(BuildingSupplyStore,BuildingSupplyStore$Kalendar <- relevel(BuildingSupplyStore$Kalendar,ref="Normal"))
attach(BuildingSupplyStore)
plot(Sales ~Date, type="l",main="Sales",col=3,lwd=5)
lines(lowess(Sales, f=.1), col = 2,lwd=4)
# Plot yearly
weeks = c(1:52,1:52,1:52,1:26)
plot(Sales~weeks,pch=20,main="Yearly Sales")
lines(lowess(Sales~weeks, f=.15), col = 2,lwd=4)
#pairs plot
pairs(BuildingSupplyStore[2:8], upper.panel = panel.cor,lower.panel = panel.smooth, diag.panel = panel.hist)
